/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package de.monticore.lang.monticar;

/**
 * Grammar for common elements that should be imported from somewhere else in future.
 */
grammar StreamUnits extends de.monticore.lang.NumberUnit, de.monticore.lang.monticar.Literals2{

  StreamUnitsCompilationUnit =
    ("package" package:(Name& || ".")+ ";")?
    ComponentStreamUnits;

  symbol scope ComponentStreamUnits = "stream" Name "for" componentName:Name /*typeParams:TypeParameters?*/  "{"
    NamedStreamUnits+
  "}";

  symbol scope NamedStreamUnits = Name ":" Stream ";" ;

  Stream = (StreamInstruction | "tick" )+;
  StreamInstruction = StreamValue | StreamCompare;
  StreamValue = Name | PrecisionNumber | SignedLiteral | DontCare | ValueAtTick;
  ValueAtTick = Name "(" (value:UnitNumber|lowerBound:UnitNumber ":" upperBound:UnitNumber ) ")";
  DontCare = "-";
  ast StreamCompare = method public ASTStreamValue getLeft(){}
                      method public ASTStreamValue getRight(){}
                      method public String getOperator(){};
  interface StreamCompare;
  StreamCompareBigger implements StreamCompare = left:StreamValue operator:">" right:StreamValue ;
  StreamCompareSmaller implements StreamCompare = left:StreamValue operator:"<" right:StreamValue;
  StreamCompareSmallerEqual implements StreamCompare = left:StreamValue operator:"<=" right:StreamValue;
  StreamCompareBiggerEqual implements StreamCompare = left:StreamValue operator:">=" right:StreamValue;

  PrecisionNumber = UnitNumber (Precision)?;
  Precision = "+" "/" "-" UnitNumber;
}
