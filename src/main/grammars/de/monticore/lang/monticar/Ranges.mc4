/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

/***************************************************************************************/
/*                          RANGES GRAMMAR
 *
 * this grammar is written by: Michael von Wenckstern
 * the grammar exports the following non-terminals:
 *
 *      + Range: "(-10 cm : 1 mm : 2 dm)" has the values {-10.0 cm, -9.9 cm, -9.8 cm,
 *                                                        ..., 19.9 cm, 20 cm}
 *               "(-10 : 2 : 10 cm)" is a short-form for "(-10 cm : 2 cm : 10 cm)"
 *               "(-oo : +oo)" represents an undefined range
 *               "(0 m : oo m)" is also a valid range
 *
 *      + Ranges: multiple ranges, it is used if the step will change inside the range
 *                "[(0 : 0.05 : 10) (10 : 0.1 : 45°)]"
 *                has the values {0.00°,  0.05°, 0.10°,  ...,  9.90°,  9.95°, 10.00°,
 *                               10.10°, 10.20°, 10.30°, ..., 44.80°, 44.90°, 45.00°}
 *
 *  CAUTION: token Name is overwritten! "oo" is not allowed as name anymore
 *
 *  for better readability the characteristic of a number (the left part of the dot)
 *  can be written as 3er groups, e.g. "12'345'678" ("12345678" would be also allowed) */
/***************************************************************************************/

package de.monticore.lang.monticar;

/**
 * Grammar does not use Literals, since we do not want to have 6
 * different ASTs for numbers
 */
grammar Ranges extends de.monticore.lang.monticar.Types2, siunit.monticoresiunit.SI, de.monticore.lang.monticar.MCExpressions  {

    /**
     * steering in the range from 0° to 10° has a resolution of 0.05° and
     * steering in the range from 10° to 45° has a resolution of 0.1°:
     * "[(0 : 0.05 : 10) (10 : 0.1 : 45 deg)]"
     *       (if unit is exactly given once than every value has this unit)
     * an example of a later-on use case is:
     *   "ports in [(0 : 0.05 : 10) (10 : 0.1 : 45°)] steering;"
    */
    ast Ranges = method public String printType(){
        return "RangesType";
    };

    Ranges implements PrintType, TypeArgument="["
                                Range+
                            "]";

    /** Range is something like "(-3 m/s^2 : 0.1 m/s^2 : 3 m/s^2)"
      *  this represents a datatype of acceleration going from -3 m/s^2 to +3 m/s^2 in a step size of 0.1 m/s^2
     */
    interface RangeType extends PrintType;
    ast Range= method public String printType(){return "RangeType";};
    Range implements PrintType, TypeArgument=
       (["Z"] | ["Q"] | ["C"])? "("?
           (startInf:TUnitInf | start:UnitNumberResolution)
           (":" (step:UnitNumberResolution| ["f"] | ["d"] ))?
           ":" (endInf:TUnitInf | end:UnitNumberResolution) ")"?
       ;
    ast NaturalNumbersOneRange= method public String printType(){return "RangeType";};
    ast NaturalNumbersZeroRange= method public String printType(){return "RangeType";};
    ast WholeNumbersRange= method public String printType(){return "RangeType";};

    NaturalNumbersOneRange astextends ASTRange implements RangeType = "N1";
    NaturalNumbersZeroRange astextends ASTRange implements RangeType = "N0";
    WholeNumbersRange  astextends ASTRange implements RangeType = "Z";

    UnitNumberExpression implements Expression = TUnitNumber | TUnitInf;

}
