/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package de.monticore.lang.monticar;

/**
 * This grammar defines Java compliant types. The scope of this grammar is to
 * ease the reuse of type structures in Java-like sublanguages, e.g., by grammar
 * inheritance or grammar embedment.
 * The grammar contains types from Java, e.g., primitives, void, types with
 * dimensions, reference types, generics, and type parameters.
 *
 * @author Martin Schindler
*/
grammar Types2 extends de.monticore.lang.monticar.Literals2, siunit.monticoresiunit.SI, de.monticore.lang.monticar.Resolution {



  ast UnitNumberTypeArgument= method public String printType(){return "UnitNumberTypeArgument";};
  UnitNumberTypeArgument implements PrintType, TypeArgument  = UnitNumber;

  ast UnitNumberResolution= method public String printType(){return "UnitNumberResolution";};
  UnitNumberResolution implements PrintType, Resolution, TypeArgument = Name | UnitNumber;

     /*========================================================================*/
        /*============================== OPTIONS =================================*/
        /*========================================================================*/

        concept antlr {
            parser java {
                /**
                 * Counts the number of LT of type parameters and type arguments.
                 * It is used in semantic predicates to ensure the right number
                 * of closing '>' characters; which actually may have been
                 * either GT, SR (GTGT), or BSR (GTGTGT) tokens.
                 */
                public int ltCounter = 0;
                public int cmpCounter = 0;

            }
        }


        /*========================================================================*/
        /*======================= INTERFACE DEFINITIONS ==========================*/
        /*========================================================================*/

        ast QualifiedName =
            method public String toString(){
              return de.se_rwth.commons.Names.getQualifiedName(
                  this.getParts());
            };

        ast PrimitiveType =
            method public String toString(){
              if (isBoolean()){
                return "boolean";
              }
              if (isByte()){
                return "byte";
              }
              if (isChar()){
                return "char";
              }
              if (isShort()){
                return "short";
              }
              if (isInt()){
                return "int";
              }
              if (isFloat()){
                return "float";
              }
              if (isLong()){
                return "long";
              }
              if (isDouble()){
                return "double";
              }
              return "";
            }
            method public boolean isBoolean(){
              return this.getPrimitive()==de.monticore.lang.monticar.types2._ast.ASTConstantsTypes2.BOOLEAN;
            }
            method public boolean isByte(){
              return this.getPrimitive()==de.monticore.lang.monticar.types2._ast.ASTConstantsTypes2.BYTE;
            }
            method public boolean isChar(){
              return this.getPrimitive()==de.monticore.lang.monticar.types2._ast.ASTConstantsTypes2.CHAR;
            }
            method public boolean isShort(){
              return this.getPrimitive()==de.monticore.lang.monticar.types2._ast.ASTConstantsTypes2.SHORT;
            }
            method public boolean isInt(){
              return this.getPrimitive()==de.monticore.lang.monticar.types2._ast.ASTConstantsTypes2.INT;
            }
            method public boolean isFloat(){
              return this.getPrimitive()==de.monticore.lang.monticar.types2._ast.ASTConstantsTypes2.FLOAT;
            }
            method public boolean isLong(){
              return this.getPrimitive()==de.monticore.lang.monticar.types2._ast.ASTConstantsTypes2.LONG;
            }
            method public boolean isDouble(){
              return this.getPrimitive()==de.monticore.lang.monticar.types2._ast.ASTConstantsTypes2.DOUBLE;
            };

        ast ReferenceType astextends ASTType;

        ast ArrayType astimplements ASTReferenceType =
            componentType:ASTType
            dimensions:int;

        /** ASTType defines types like primitives, Set, List, Collection, or
            class types. It might also be an array or generic type.
        */
        interface Type extends TypeArgument, ReturnType;

        /** ASTReferenceType defines a reference type like arrays or complex types.
        */
        interface ReferenceType;

        interface PrintType extends Type;

        /** ASTReturnType represents return types.
        */
        interface ReturnType;


        /*========================================================================*/
        /*============================ PARSER RULES ==============================*/
        /*========================================================================*/

        /** The ASTQualifiedName represents a possibly qualified name in the AST.
            The different parts of a qualified name are separated by '.'; they are
            stored in an ASTStringList.
            @attribute parts A List of ASTStringList concludes all name parts
        */
        QualifiedName =
            parts:Name& ("." parts:Name&)*;

        /** The ASTAbstractArrayType represents array of Type
        */
        abstract ArrayType implements Type;

        /** The ASTArrayType represents an array of any type. The rule
            ComplexArrayType itself treats all arrays except the primitive
            ones. Especially it treats generic types.
            @attribute componentType The kind of type which is used for the array.
                                     Could be every complex type.
            @attribute dimensions    Counts the number of '[]'
        */
        ComplexArrayType extends ArrayType implements Type
        =
            // Things are getting ugly. We have to disambiguate between
            // Class<List<Anything>>[]
            // and
            // Class<List<Anything>[]>
            // So we have to make sure that we only take the array dimensions if we
            // are at the right level. If we would not, we wouldn't know that ">>"
            // actually closes two levels and not just one as ">" does. It would
            // then count the array dimensions to the inner type resulting in the
            // same tree for each of the cases above.
            componentType:ComplexReferenceType
            (
              (
                (
                  "[" "]"
                  {_aNode.setDimensions(_aNode.getDimensions()+1);}
                )+
              )
            );

        /** The ASTArrayType represents an array of any type. The rule
            PrimitiveArrayType itself treats arrays of primitive types, such as
            'int[]'.
            @attribute componentType The kind of which is used for the array.
                                     Could be every primitive type.
            @attribute dimensions    Counts the number of '[]'
        */
        PrimitiveArrayType extends ArrayType implements Type =
            componentType:PrimitiveType
              (
                "[" "]"
                {_aNode.setDimensions(_aNode.getDimensions()+1);}
              )+;

        /** ASTVoidType represents the return type "void".
        */
        VoidType implements ReturnType =
            "void";

        /** ASTPrimitiveType represents every primitive type supported by Java.
            @attribute primitive BOOLEAN, BYTE, CHAR, SHORT, INT, FLOAT, LONG,
                                 or DOUBLE
        */
        PrimitiveType implements Type =
            primitive: ["boolean" | "byte" | "short" | "int" | "long" | "char" |"float" | "double"];

        /** ASTSimpleReferenceType represents types like class or interface types
            which could have a qualified name like this: a.b.c<Arg>. The
            qualification stored in the name (a.b) could be package or a type name.
            The qualified name could contain type arguments only at the end.
            a.b.c<Arg>.d would be one ASTSimpleReferenceType (a.b.c<Arg>) and one
            ASTQualifiedType (d).
            @attribute name          Name of the type
                                     Note: Although the class name contains the
                                     word 'simple', the name could be a qualified
                                     one. So it is saved in an ASTStringList
            @attribute typeArguments The types between '<...>'
        */
        SimpleReferenceType implements ReferenceType, Type =
            Name
            ("." Name&)*
            (TypeArguments)?;

        /** ASTComplexReferenceType represents types like class or interface types which
            always have  ASTSimpleReferenceType as
            qualification.
            For example:
            a.b.c<Arg>.d.e<Arg>
            @attribute name          Name of the type
            @attribute typeArguments The types between '<...>'
            @attribute qualification Another ASTQualifiedType or
                                     ASTSimpleReferenceType.
        */
        ComplexReferenceType implements ReferenceType, Type =
            SimpleReferenceType ("." SimpleReferenceType)*;

        /** ASTTypeArguments represents a list of generic arguments parenthesized
            by '<...>'. It is also possible to nest type arguments in each other
            like this <A<B<C>>>.
            @attribute typeArguments List of arguments
        */
        TypeArguments {int ltLevel = 0;} =
            {ltLevel = ltCounter;}
            (
              "<" {ltCounter++;}
              typeArguments:TypeArgument
              (
                    "," typeArguments:TypeArgument
              )*
              (
                /*
                 * The token stream contains GT, GTGT, or GTGTGT tokens,
                 * so the parser has to expect one of these three possibilities.
                 * Furthermore the angle brackets are counted to check if there
                 * are some left open. After parsing the ltCounter has to be 0,
                 * what is checked by the predicate below.
                 */
                ">" {ltCounter-=1;}
                | ">>" {ltCounter-=2;}
                | ">>>" {ltCounter-=3;}
              )?
            )
           // This predicate checks if we have a valid angle bracket structure.
            {cmpCounter = ltLevel;}
            {(cmpCounter != 0) || ltCounter == cmpCounter}?;


        /** ASTWildcardType represents a wildcard type in a type argument (generics)
            It could also contain an upper- or lower bound.
            @attribute upperBound Supertye of the type argument
            @attribute lowerBound Subtype of the type argument
        */
        WildcardType implements TypeArgument =
            "?" (
                  ("extends" upperBound:Type) | ("super" lowerBound:Type)
                )?;

        /** ASTTypeParameters represents a list of generic parameter parenthesized
            by '<...>' in type declarations (e.g., class-, interface-, method-, or
            constructor declarations).
            @attribute typeVariableDeclarations List of parameters
        */
        TypeParameters {int ltLevel = 0;} =
            {ltLevel = ltCounter;}
            (
              "<" {ltCounter++;}
              typeVariableDeclarations:TypeVariableDeclaration
              (
                "," typeVariableDeclarations:TypeVariableDeclaration
              )*
              ( // inlined typeArgumentsEnd
                ">" {ltCounter-=1;}
                | ">>" {ltCounter-=2;}
                | ">>>" {ltCounter-=3;}
              )?
            )
            {cmpCounter = ltLevel;}
            // This predicate checks if we have a valid angle bracket structure
            // (if we are at the "top level" of nested TypeArgument productions).
            {(cmpCounter != 0) || ltCounter == cmpCounter}?
            | /* nothing! (instead of optionality) */;

        /** ASTTypeVariableDeclaration represents the generic variable declaration
            in '<'...'>' (e.g., in front of method or constructor declarations or
            behind the class or interface name).
            E.g.: public <T extends SuperClass> void test(T t)
            This does also include variable instantiation like <N1 n=4>
            @attribute name        Name of the type variable
            @attribute upperBounds Optional list of required super classes
        */
        TypeVariableDeclaration =
            (ResolutionDeclaration)|(NamingResolution
            (
              "extends" upperBounds:ComplexReferenceType
              ("&" upperBounds:ComplexReferenceType)*
            )?);






      /** ImportStatement represents the import list for diagrams
          E.g.: import A.b;
          E.g.: import A.*;
      */
        ImportStatement = "import" importList:Name& ( "." importList:Name&)* ("." Star:["*"])? ";" ;



    ast ElementType = method public Optional<String> getName() {
      return Optional.of("ElementType");
    };
    // since Q(1 : 7) would conflict with with vector expression, we need to define
    // it as token, and then parse the token later on
    // this due to the fact that MC4 does not support island grammars such as Antlr4
    ElementType implements Type, TypeArgument, Resolution = TElementType |
                 [isWholeNumberNumber:"Z"] |
                 [isRational:"Q"] |
                 [isComplex:"C"] |
                 [isBoolean:"B"];

    token TElementType =
      ('Z' | 'Q' | 'C') Space*
        '(' Space* (TUnitNumber | TUnitInf) Space* ':'
            (Space* TUnitNumber Space* ':')?
            Space* (TUnitNumber | TUnitInf) Space*
        ')';

    // ast of ElementType will be now manually constructed as it would be when MC4 would
    // read the following definition:
    /*
    ElementType =
     (([isWholeNumber:"Z"] | [isRational:"Q"] | [isComplex:"C"]) range:Range?) |
     [isBoolean:"B"];
    */


    /** put here because of dependencies**/
    ast TypeNameResolutionDeclaration = method public String getTypeName(){
        return getType().toString();
    };
    TypeNameResolutionDeclaration implements ResolutionDeclaration = Type Name ("=" Resolution);//TODO investigate issues related to this
    ast UnitNumberResolutionDeclaration = method public String getTypeName(){
            return getType().toString();
    };
    UnitNumberResolutionDeclaration implements ResolutionDeclaration = Type name:Name ("=" UnitNumber)?;
    ast NamingResolution= method public String getTypeName(){
                return null;
    };
    NamingResolution implements ResolutionDeclaration = Name;
    }
