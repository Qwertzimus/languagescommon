/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package de.monticore.lang.monticar;

/**
 * This grammar defines Java compliant literals. The scope of this grammar is to
 * ease the reuse of literals structures in Java-like sublanguages, e.g., by
 * grammar inheritance or grammar embedment.
 * The grammar contains literals from Java, e.g., Boolean, Char, String, ....
 *
 * @author Martin Schindler
*/

grammar Literals2 extends de.monticore.lexicals.Lexicals, de.monticore.lang.NumberUnit {

  /*========================================================================*/
  /*======================= AST DEFINITIONS ================================*/
  /*========================================================================*/
  ast BooleanLiteral =
    method public boolean getValue() {
      return this.source == de.monticore.lang.monticar.literals2._ast.ASTConstantsLiterals2.TRUE;
    }
  ;

  ast CharLiteral =
    method public char getValue() {
      try {
        return de.monticore.literals.LiteralsHelper.getInstance().decodeChar(getSource());
      }
      catch (Exception e) {
        return ' ';
      }
    }
  ;

  ast StringLiteral =
    method public String getValue() {
      try {
        return de.monticore.literals.LiteralsHelper.getInstance().decodeString(getSource());
      }
      catch (Exception e) {
        return "";
      }
    }
  ;

  /*========================================================================*/
  /*======================= INTERFACE DEFINITIONS ==========================*/
  /*========================================================================*/

  /** ASTLiteral is the interface for all literals (NullLiteral,
        BooleanLiteral, CharLiteral, StringLiteral and all NumericLiterals)
    */
  interface Literal;


  /** ASTSignedLiteral is the interface for all literals (NullLiteral,
        BooleanLiteral, CharLiteral, StringLiteral and all NumericLiterals).
        Compared to Literal it also includes negative NumericLiterals
    */
  interface SignedLiteral;




  /*========================================================================*/
  /*============================ PARSER RULES ==============================*/
  /*========================================================================*/

  /** ASTNullLiteral represents 'null'
    */
  NullLiteral implements Literal, SignedLiteral =
    "null";


  /** ASTBooleanLiteral represents "true" or "false"
        @attribute source String-representation (including '"').
    */
  BooleanLiteral implements Literal, SignedLiteral =
    source:["true" | "false"];


  /** ASTCharLiteral represents any valid character parenthesized with "'".
        @attribute source String-representation (including "'").
    */
  CharLiteral implements Literal, SignedLiteral =
    source:Char;


  /** ASTStringLiteral represents any valid character sequence parenthesized
        with '"'.
        @attribute source String-representation (including '"').
    */
  StringLiteral implements Literal, SignedLiteral =
    source:String;





  /*========================================================================*/
  /*============================ LEXER RULES ===============================*/
  /*========================================================================*/


  /*========================================================================*/
  /* The following section is adapted from                                  */
  /* https://github.com/antlr/grammars-v4/blob/master/java/Java.g4          */
  /*========================================================================*/



  // §3.10.4 Character Literals
  token Char
    = '\'' SingleCharacter '\'' | '\'' EscapeSequence '\'';

  fragment token SingleCharacter
    = ~ ('\'');

 // §3.10.5 String Literals
  token String
    = '"' (StringCharacters)? '"' ;
  // TODO: Sollen die Quotes rausgeworfen werden?
  // Es gibt in MC3 2 Varianten. STRING (ohne Quote) und String (mit Quote)
  // So würde man das rauswerfen:
  //  : {setText(getText().substring(1, getText().length() - 1));};

  fragment token StringCharacters
    = (StringCharacter)+;

  fragment token StringCharacter
    = ~ ('"') | EscapeSequence | UnicodeEscape;

  // §3.10.6 Escape Sequences for Character and String Literals
  fragment token EscapeSequence
    = '\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | '\'' | '\\');


  fragment token UnicodeEscape
    = '\\' 'u' THexUnitNumber;

  interface TemplateResolution;

  NameTemplateResolution implements TemplateResolution=Name;
}
